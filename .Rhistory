"research", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords)
#Add new stopwords and repeat the tokenization process
tokenizing_abstract <- A91_95final %>%
mutate(id = row_number()) %>%
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2)
#Frequency of words
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>3) %>% #Filter words that appear more than "n" times
mutate(word2 = fct_reorder(word, n)) %>%
arrange(desc(n))
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/max(n), fill = "red")
) +
geom_col() +
coord_flip() +
labs(
title = "Most frequent words of filtered abstracts: 1991 - 1995",
x = "Words", y ="Normalized frequency - Total of 3 papers"
)
# Select papers from 1996 - 2000
A96_00 <- df[df$Year >= 1996 & df$Year<=2000,]
# Select only the abstract
A96_00 <- A96_00[,9]
#Data Cleaning
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", A96_00)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
#Lematize terms in its dictionary form
A96_00 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
A96_00final <- data.frame(A96_00)
colnames(A96_00final) <- c("abstracts")
#Tokenize words from abstracts
tokenizing_abstract <- A96_00final %>%
mutate(id = row_number()) %>% #Create new id for each abstract
unnest_tokens(word, abstracts) %>%
anti_join(stop_words) #Remove stopwords (english package of stopwords)
adicional_stopwords <- tribble(
~word,~lexicon,
"study", "CUSTOM",
"paper", "CUSTOM",
"article", "CUSTOM",
"base", "CUSTOM",
"information", "CUSTOM",
"discussion", "CUSTOM",
"result", "CUSTOM",
"research", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords)
#Add new stopwords and repeat the tokenization process
tokenizing_abstract <- A96_00final %>%
mutate(id = row_number()) %>%
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2)
#Frequency of words
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>8) %>% #Filter words that appear more than "n" times
mutate(word2 = fct_reorder(word, n)) %>%
arrange(desc(n))
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/max(n), fill = "red")
) +
geom_col() +
coord_flip() +
labs(
title = "Most frequent words of filtered abstracts: 1996 - 2000",
x = "Words", y ="Normalized frequency - Total of 19 papers"
)
# Select papers from 2001 - 2005
A01_05 <- df[df$Year >= 2001 & df$Year<=2005,]
# Select only the abstract
A01_05 <- A01_05[,9]
#Data Cleaning
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", A01_05)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
#Lematize terms in its dictionary form
A01_05 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
A01_05final <- data.frame(A01_05)
colnames(A01_05final) <- c("abstracts")
#Tokenize words from abstracts
tokenizing_abstract <- A01_05final %>%
mutate(id = row_number()) %>% #Create new id for each abstract
unnest_tokens(word, abstracts) %>%
anti_join(stop_words) #Remove stopwords (english package of stopwords)
adicional_stopwords <- tribble(
~word,~lexicon,
"study", "CUSTOM",
"paper", "CUSTOM",
"article", "CUSTOM",
"base", "CUSTOM",
"result", "CUSTOM",
"research", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords)
#Add new stopwords and repeat the tokenization process
tokenizing_abstract <- A01_05final %>%
mutate(id = row_number()) %>% #Create new id for each abstract
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2)
#Frequency of words
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>7) %>% #Filter words that appear more than "n" times
mutate(word2 = fct_reorder(word, n)) %>%
arrange(desc(n))
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/max(n), fill = "red")
) +
geom_col() +
coord_flip() +
labs(
title = "Most frequent words of filtered abstracts: 2001 - 2005",
x = "Words", y ="Normalized frequency - Total of 13 papers"
)
#Select papers from 2006 - 2010
A06_10 <- df[df$Year >= 2006 & df$Year<=2010,]
# Select only the abstract
A06_10 <- A06_10[,9]
#Data Cleaning
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", A06_10)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
#Lematize terms in its dictionary form
A06_10 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
A06_10final <- data.frame(A06_10)
colnames(A06_10final) <- c("abstracts")
#Tokenize words from abstracts
tokenizing_abstract <- A06_10final %>%
mutate(id = row_number()) %>% #Create new id for each abstract
unnest_tokens(word, abstracts) %>%
anti_join(stop_words) #Remove stopwords (english package of stopwords)
adicional_stopwords <- tribble(
~word,~lexicon,
"study", "CUSTOM",
"paper", "CUSTOM",
"article", "CUSTOM",
"base", "CUSTOM",
"result", "CUSTOM",
"process", "CUSTOM",
"research", "CUSTOM",
"datum", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords)
#Add new stopwords and repeat the tokenization process
tokenizing_abstract <- A06_10final %>%
mutate(id = row_number()) %>%
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2)
#Frequency of words
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>10) %>% #Filter words that appear more than "n" times
mutate(word2 = fct_reorder(word, n)) %>%
arrange(desc(n))
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/max(n), fill = "red")
) +
geom_col() +
coord_flip() +
labs(
title = "Most frequent words of filtered abstracts: 2006 - 2010",
x = "Words", y ="Normalized frequency - Total of 31 papers"
)
# Select papers from 2011 - 2015
A11_15 <- df[df$Year >= 2011 & df$Year<= 2015,]
# Select only the abstract
A11_15 <- A11_15[,9]
#Data Cleaning
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", A11_15)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
#Lematize terms in its dictionary form
A11_15 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
A11_15final <- data.frame(A11_15)
colnames(A11_15final) <- c("abstracts")
#Tokenize words from abstracts
tokenizing_abstract <- A11_15final %>%
mutate(id = row_number()) %>% #Create new id for each abstract
unnest_tokens(word, abstracts) %>%
anti_join(stop_words) #Remove stopwords (english package of stopwords)
adicional_stopwords <- tribble(
~word,~lexicon,
"study", "CUSTOM",
"paper", "CUSTOM",
"article", "CUSTOM",
"base", "CUSTOM",
"result", "CUSTOM",
"research", "CUSTOM",
"datum", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords)
#Add new stopwords and repeat the tokenization process
tokenizing_abstract <- A11_15final %>%
mutate(id = row_number()) %>%
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2)
#Frequency of words
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>44) %>% #Filter words that appear more than "n" times
mutate(word2 = fct_reorder(word, n)) %>%
arrange(desc(n))
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/max(n), fill = "red")
) +
geom_col() +
coord_flip() +
labs(
title = "Most frequent words of filtered abstracts: 2011 - 2015",
x = "Words", y ="Normalized frequency - Total of 103 papers"
)
# Select papers from 2016 - 2020
A16_20 <- df[df$Year >= 2016 & df$Year<=2020,]
# Select only the abstract
A16_20 <- A16_20[,9]
#Data Cleaning
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", A16_20)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
#Lematize terms in its dictionary form
A16_20 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
A16_20final <- data.frame(A16_20)
colnames(A16_20final) <- c("abstracts")
#Tokenize words from abstracts
tokenizing_abstract <- A16_20final %>%
mutate(id = row_number()) %>% #Create new id for each abstract
unnest_tokens(word, abstracts) %>%
anti_join(stop_words) #Remove stopwords (english package of stopwords)
adicional_stopwords <- tribble(
~word,~lexicon,
"study", "CUSTOM",
"paper", "CUSTOM",
"article", "CUSTOM",
"base", "CUSTOM",
"information","CUSTOM",
"analysis", "CUSTOM",
"discussion","CUSTOM",
"result", "CUSTOM",
"research", "CUSTOM",
"datum", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords)
#Add new stopwords and repeat the tokenization process
tokenizing_abstract <- A16_20final %>%
mutate(id = row_number()) %>%
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2)
#Frequency of words
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>130) %>% #Filter words that appear more than "n" times
mutate(word2 = fct_reorder(word, n)) %>%
arrange(desc(n))
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/max(n), fill = "red")
) +
geom_col() +
coord_flip() +
labs(
title = "Most frequent words of filtered abstracts: 2016 - 2020",
x = "Words", y ="Normalized frequency - Total of 326 papers"
)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(NLP)
library(stringr)
library(topicmodels)
library(tidytext)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(SnowballC)
library(textstem)
folder <- "Data\\Full_papers"
filelist <- list.files(folder, pattern = ".txt") #select only documents ".txt"
filelist <- paste(folder, "\\", filelist, sep="") #Join documents.
x <- lapply(filelist, FUN = readLines) #Considers each line as a different element (document).
docs <- lapply(x, FUN = paste, collapse = " ")
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", docs)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
#Lematize terms in its dictionary form
text6 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
adicional_stopwords <- c("good","represent", "present", "different","london", "may","datum","taipei", "numb", "much", "one", "two", "can", "fig", "will", "arm", "along", "xpj", "figure", "thus","aviv", "tel", "dsc","dscs","traf","also","study", stopwords("en"))
#remove stopwords
text7 <- removeWords(text6, adicional_stopwords)
# Remove words for bigrams
new_stopwords <- c("ow", "exible", "cantly","wick", "exibility", "uence", "uences", "ned")
text_bigram <- removeWords(text7, new_stopwords)
corpus <- Corpus(VectorSource(text7))
View(corpus)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(NLP)
library(stringr)
library(topicmodels)
library(tidytext)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(SnowballC)
library(textstem)
folder <- "Data\\Full_papers"
filelist <- list.files(folder, pattern = ".txt") #select only documents ".txt"
filelist <- paste(folder, "\\", filelist, sep="") #Join documents.
x <- lapply(filelist, FUN = readLines) #Considers each line as a different element (document).
docs <- lapply(x, FUN = paste, collapse = " ")
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", docs)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
#Lematize terms in its dictionary form
text6 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
adicional_stopwords <- c("good","represent", "present", "different","london", "may","datum","taipei", "numb", "much", "one", "two", "can", "fig", "will", "arm", "along", "xpj", "figure", "thus","aviv", "tel", "dsc","dscs","traf","also","study", stopwords("en"))
#remove stopwords
text7 <- removeWords(text6, adicional_stopwords)
# Remove words for bigrams
new_stopwords <- c("ow", "exible", "cantly","wick", "exibility", "uence", "uences", "ned")
text_bigram <- removeWords(text7, new_stopwords)
corpus <- Corpus(VectorSource(text7))
dtm <- DocumentTermMatrix(corpus)
str(dtm)
dtm.matrix <- as.matrix(dtm)
wordcount <- colSums(dtm.matrix)
topten <- head(sort(wordcount, decreasing=TRUE), 10)
print(topten)
k <- 6
ldaOut <- LDA(dtm,
k,
method="Gibbs",
control=list(seed = 42))
lda_topics <- ldaOut %>%
tidy(matrix = "beta") %>%
arrange(desc(beta))
word_probs <- lda_topics %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
#Create term2, a factor ordered by word probability
mutate(term2 = fct_reorder(term, beta))
ggplot(
word_probs,
aes(term2,beta,fill = as.factor(topic))
) + geom_col(show.legend = FALSE) +
# Facet the bar plot by topic
facet_wrap(~ topic, scales = "free") +
coord_flip() +
labs(x = "term")
library(quanteda)
library(igraph)
library(ggraph)
library(tidyverse)
library(tidyr)
library(broom)
df_corpus <- data.frame(text_bigram)
bigrams_df <- df_corpus %>%
unnest_tokens(output = bigram,
input = text_bigram,
token = "ngrams",
n = 2)
bigrams_df %>%
count(bigram, sort = TRUE)
bigrams_separated <- bigrams_df %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigram_network <- bigram_counts %>%
filter(n > 15) %>% #filter for the most common combinations of bigrams that appear at least 15 times.
graph_from_data_frame()
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
bigrams_separated <- bigrams_df %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
bigram_network <- bigram_counts %>%
filter(n > 15) %>% #filter for the most common combinations of bigrams that appear at least 15 times.
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 4) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
bigram_network <- bigram_counts %>%
filter(n > 15) %>% #filter for the most common combinations of bigrams that appear at least 15 times.
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.10, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 4) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
bigram_network <- bigram_counts %>%
filter(n > 15) %>% #filter for the most common combinations of bigrams that appear at least 15 times.
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.7, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 4) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
bigram_network <- bigram_counts %>%
filter(n > 15) %>% #filter for the most common combinations of bigrams that appear at least 15 times.
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.07, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 4) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
bigram_network <- bigram_counts %>%
filter(n > 15) %>% #filter for the most common combinations of bigrams that appear at least 15 times.
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.07, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, 'inches')) +
geom_node_point(color = "lightblue", size = 4) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
bigram_network <- bigram_counts %>%
filter(n > 15) %>% #filter for the most common combinations of bigrams that appear at least 15 times.
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.07, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.03, 'inches')) +
geom_node_point(color = "lightblue", size = 4) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
bigram_network <- bigram_counts %>%
filter(n > 15) %>% #filter for the most common combinations of bigrams that appear at least 15 times.
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.07, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.03, 'inches')) +
geom_node_point(color = "lightblue", size = 2) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
