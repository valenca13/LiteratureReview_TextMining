filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
#Bigram counts
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
#bigram_counts
#Create network of bigrams
#filter for common combinations of biwords
bigram_network <- bigram_counts %>%
filter(n > 15) %>%
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 0.8, hjust = 0.4) +
theme_void()
#Biagrams
library(quanteda)
library(igraph)
library(ggraph)
library(tidyr)
#Covert each paper to a line
t_corpus <- text_bigram %>% tidy()
#t_corpus
#create dataframe
df_corpus <- data.frame(t_corpus)
#Create biagrams
bigrams_df <- df_corpus %>%
unnest_tokens(output = bigram,
input = x,
token = "ngrams",
n = 2)
#Count bigrams
bigrams_df %>%
count(bigram, sort = TRUE)
#Remove stopwords in case it wasn't in the beginning.
data("stop_words")
#Separate words into two columns
bigrams_separated <- bigrams_df %>%
separate(bigram, c("word1", "word2"), sep = " ")
#Remove stopwords
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
#Bigram counts
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
#bigram_counts
#Create network of bigrams
#filter for common combinations of biwords
bigram_network <- bigram_counts %>%
filter(n > 15) %>%
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 0.2) +
theme_void()
#Biagrams
library(quanteda)
library(igraph)
library(ggraph)
library(tidyr)
#Covert each paper to a line
t_corpus <- text_bigram %>% tidy()
#t_corpus
#create dataframe
df_corpus <- data.frame(t_corpus)
#Create biagrams
bigrams_df <- df_corpus %>%
unnest_tokens(output = bigram,
input = x,
token = "ngrams",
n = 2)
#Count bigrams
bigrams_df %>%
count(bigram, sort = TRUE)
#Remove stopwords in case it wasn't in the beginning.
data("stop_words")
#Separate words into two columns
bigrams_separated <- bigrams_df %>%
separate(bigram, c("word1", "word2"), sep = " ")
#Remove stopwords
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
#Bigram counts
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
#bigram_counts
#Create network of bigrams
#filter for common combinations of biwords
bigram_network <- bigram_counts %>%
filter(n > 15) %>%
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = .5, hjust = 0.2) +
theme_void()
#Biagrams
library(quanteda)
library(igraph)
library(ggraph)
library(tidyr)
#Covert each paper to a line
t_corpus <- text_bigram %>% tidy()
#t_corpus
#create dataframe
df_corpus <- data.frame(t_corpus)
#Create biagrams
bigrams_df <- df_corpus %>%
unnest_tokens(output = bigram,
input = x,
token = "ngrams",
n = 2)
#Count bigrams
bigrams_df %>%
count(bigram, sort = TRUE)
#Remove stopwords in case it wasn't in the beginning.
data("stop_words")
#Separate words into two columns
bigrams_separated <- bigrams_df %>%
separate(bigram, c("word1", "word2"), sep = " ")
#Remove stopwords
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
#Bigram counts
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
#bigram_counts
#Create network of bigrams
#filter for common combinations of biwords
bigram_network <- bigram_counts %>%
filter(n > 15) %>%
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = .5, hjust = 0) +
theme_void()
#Biagrams
library(quanteda)
library(igraph)
library(ggraph)
library(tidyr)
#Covert each paper to a line
t_corpus <- text_bigram %>% tidy()
#t_corpus
#create dataframe
df_corpus <- data.frame(t_corpus)
#Create biagrams
bigrams_df <- df_corpus %>%
unnest_tokens(output = bigram,
input = x,
token = "ngrams",
n = 2)
#Count bigrams
bigrams_df %>%
count(bigram, sort = TRUE)
#Remove stopwords in case it wasn't in the beginning.
data("stop_words")
#Separate words into two columns
bigrams_separated <- bigrams_df %>%
separate(bigram, c("word1", "word2"), sep = " ")
#Remove stopwords
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
#Bigram counts
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
#bigram_counts
#Create network of bigrams
#filter for common combinations of biwords
bigram_network <- bigram_counts %>%
filter(n > 15) %>%
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 4) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
library(tm)
library(NLP)
library(tidyverse)
df <- data.frame(systematicreview)
#Remover coluna (authors)
df <- df[,-c(7)] #remover coluna 7 (autors)
df <- subset(df, df[2]=="1") #Filtrar LDA model = 1
# Selecionar artigos entre 1978 - 1985
A78_85 <- df[df$Year >= 1978 & df$Year<=1985,]
# Vetor das palavras
docs <- A78_85$Abstract
#Cleaning data
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", docs)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
A78_85 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
A78_85 <- tm_map(A78_85, PlainTextDocument)
strings <- c("neighborhoods")
abstracts <- str_replace_all(A78_85, strings, "neighborhood")
A78_85final <- data.frame(abstracts)
library(tidytext)
#Transformar abstract em palavras
tokenizing_abstract <- A78_85final %>%
mutate(id = row_number()) %>% #Criar novo ID para cada paper
unnest_tokens(word, abstracts) %>%
anti_join(stop_words) #Remove stopwords (english package of stopwords)
adicional_stopwords <- tribble(
~word,~lexicon,
"study", "CUSTOM",
"paper", "CUSTOM",
"article", "CUSTOM",
"based", "CUSTOM",
"results", "CUSTOM",
"information","CUSTOM",
"research", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords) #Acrescentar essas stopwords nas originais (linhas) e nao juntar colunas com o anti-join.
#Adicionar stopwords2
tokenizing_abstract <- A78_85final %>%
mutate(id = row_number()) %>% #Criar novo ID para cada paper
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2) #Remove stopwords (english package of stopwords)
library(tidytext)
#Transformar abstract em palavras
#Contar o número de palavras
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>1) %>% #Filtrar palavras que aparecem apenas mais de 100 vezes
mutate(word2 = fct_reorder(word, n)) %>% #Ordenar no gráfico por ordem decrescente
arrange(desc(n)) #Colocar em ordem decrescente nas contagens
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/10, fill = "red")
) +
geom_col() + #Criar gráfico
coord_flip() + #inverter gráfico pra mostrar as palavras
labs(
title = "Most frequent words of filtered abstracts: 1978 - 1985",
x = "Words", y ="Normalized frequency - Total of 2 papers"
)
library(tm)
library(NLP)
library(tidyverse)
df <- data.frame(systematicreview)
#Remover coluna (authors)
df <- df[,-c(7)] #remover coluna 7 (autors)
df <- subset(df, df[2]=="1") #Filtrar LDA model = 1
# Selecionar artigos entre 1978 - 1985
A78_85 <- df[df$Year >= 1978 & df$Year<=1985,]
# Vetor das palavras
A78_85 <- A78_85$Abstract
A78_85 <- tm_map(A78_85, PlainTextDocument)
strings <- c("neighborhoods")
abstracts <- str_replace_all(A78_85, strings, "neighborhood")
A78_85final <- data.frame(abstracts)
library(tidytext)
#Transformar abstract em palavras
tokenizing_abstract <- A78_85final %>%
mutate(id = row_number()) %>% #Criar novo ID para cada paper
unnest_tokens(word, abstracts) %>%
anti_join(stop_words) #Remove stopwords (english package of stopwords)
#Cleaning data
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", tokenizing_abstract)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
tokenizing_abstract <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
adicional_stopwords <- tribble(
~word,~lexicon,
"study", "CUSTOM",
"paper", "CUSTOM",
"article", "CUSTOM",
"based", "CUSTOM",
"results", "CUSTOM",
"information","CUSTOM",
"research", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords) #Acrescentar essas stopwords nas originais (linhas) e nao juntar colunas com o anti-join.
#Adicionar stopwords2
tokenizing_abstract <- A78_85final %>%
mutate(id = row_number()) %>% #Criar novo ID para cada paper
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2) #Remove stopwords (english package of stopwords)
library(tidytext)
#Transformar abstract em palavras
#Contar o número de palavras
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>1) %>% #Filtrar palavras que aparecem apenas mais de 100 vezes
mutate(word2 = fct_reorder(word, n)) %>% #Ordenar no gráfico por ordem decrescente
arrange(desc(n)) #Colocar em ordem decrescente nas contagens
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/10, fill = "red")
) +
geom_col() + #Criar gráfico
coord_flip() + #inverter gráfico pra mostrar as palavras
labs(
title = "Most frequent words of filtered abstracts: 1978 - 1985",
x = "Words", y ="Normalized frequency - Total of 2 papers"
)
# Selecionar artigos entre 2001 - 2005
A01_05 <- df[df$Year >= 2001 & df$Year<=2005,]
# Vetor das palavras
A01_05 <- A01_05$Abstract
A01_05 <- tm_map(A01_05, PlainTextDocument)
strings <- c("cities")
abstracts <- str_replace_all(A01_05, strings, "city")
A01_05final <- data.frame(abstracts)
library(tidytext)
#Transformar abstract em palavras
tokenizing_abstract <- A01_05final %>%
mutate(id = row_number()) %>% #Criar novo ID para cada paper
unnest_tokens(word, abstracts) %>%
anti_join(stop_words) #Remove stopwords (english package of stopwords)
adicional_stopwords <- tribble(
~word,~lexicon,
"study", "CUSTOM",
"paper", "CUSTOM",
"article", "CUSTOM",
"based", "CUSTOM",
"results", "CUSTOM",
"research", "CUSTOM")
stop_words2 <- stop_words %>%
bind_rows(adicional_stopwords) #Acrescentar essas stopwords nas originais (linhas) e nao juntar colunas com o anti-join.
#Adicionar stopwords2
tokenizing_abstract <- A01_05final %>%
mutate(id = row_number()) %>% #Criar novo ID para cada paper
unnest_tokens(word, abstracts) %>%
anti_join(stop_words2) #Remove stopwords (english package of stopwords)
library(tidytext)
#Transformar abstract em palavras
#Contar o número de palavras
word_counts <- tokenizing_abstract %>%
count(word) %>%
filter(n>7) %>% #Filtrar palavras que aparecem apenas mais de 100 vezes
mutate(word2 = fct_reorder(word, n)) %>% #Ordenar no gráfico por ordem decrescente
arrange(desc(n)) #Colocar em ordem decrescente nas contagens
#Plot word count
ggplot(
word_counts, aes (x = word2, y = n/30, fill = "red")
) +
geom_col() + #Criar gráfico
coord_flip() + #inverter gráfico pra mostrar as palavras
labs(
title = "Most frequent words of filtered abstracts: 2001 - 2005",
x = "Words", y ="Normalized frequency - Total of 13 papers"
)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
```library(tm)
library(tm)
library(nlp)
library(stringr)
library(topicmodels)
library(tidytext)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(SnowballC)
library(textstem)
####################################################################################
#IMPORTING DATASET
#In this case it was considered ".txt" files. Other types of files should be imported differently
file.choose()
setwd("G:/Meu Drive/Artigos para LDA/")
folder <- "G:\\Meu Drive\\Artigos para LDA\\"
filelist <- list.files(folder, pattern = ".txt") #select only documents ".txt"
filelist <- paste(folder, "\\", filelist, sep="") #Join documents.
x <- lapply(filelist, FUN = readLines) #Considers each line as a different element (document).
docs <- lapply(x, FUN = paste, collapse = " ")
###########################################################################################
#DATA CLEANING
#Remove punctuation
text <- gsub(pattern = "\\W", replace = " ", docs)
#Remove Numbers (digits)
text2 <- gsub(pattern = "\\d", replace = " ", text)
#Lowercase words
text3 <- tolower(text2)
#remove single words
text4 <- gsub(pattern = "\\b[A-z]\\b{1}", replace = " ", text3)
#Remove whitespace
text5 <- stripWhitespace(text4)
#Lematize terms in its dictionary form
text6 <- lemmatize_strings(text5, dictionary = lexicon::hash_lemmas)
adicional_stopwords <- c("good","represent", "present", "different","london", "may","datum","taipei", "numb", "much", "one", "two", "can", "fig", "will", "arm", "along", "xpj", "figure", "thus","aviv", "tel", "dsc","dscs","traf","also","study", stopwords("en"))
#remove stopwords
text7 <- removeWords(text6, adicional_stopwords)
#A Good practice is to visualize the corpus every now and then.
writeLines(as.character(text7[[1]]))
# Remove words for bigrams
new_stopwords <- c("ow", "ï", "exible", "cantly","wick", "â", "exibility", "uence", "uences", "ned")
text_bigram <- removeWords(text7, new_stopwords)
# Create corpus from vector
corpus <- Corpus(VectorSource(text7))
#################################################################################
#TOPIC MODELLING - LATENT DIRICHLET ALLOCATION (LDA)
# Create document term matrix
dtm <- DocumentTermMatrix(corpus)
#str(dtm)
#count top ten words
dtm.matrix <- as.matrix(dtm)
wordcount <- colSums(dtm.matrix)
topten <- head(sort(wordcount, decreasing=TRUE), 10)
#Number of topics (k) is defined prior to the model.
k <- 6
#Run LDA using Gibbs sampling
ldaOut <- LDA(dtm,
k,
method="Gibbs",
control=list(seed = 42))
lda_topics <- ldaOut %>%
tidy(matrix = "beta") %>%
arrange(desc(beta))
lda_topics <- LDA(corpus,
k,
method="Gibbs",
control=list(seed = 42))
#glimpse(ldaOut)
# select 15 most frequent terms in each topic
word_probs <- lda_topics %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
#Create term2, a factor ordered by word probability
mutate(term2 = fct_reorder(term, beta))
# Plot term2 and the word probabilities
ggplot(
word_probs,
aes(term2,beta,fill = as.factor(topic))
) + geom_col(show.legend = FALSE) +
# Facet the bar plot by topic
facet_wrap(~ topic, scales = "free") +
coord_flip() +
labs(x = "term")
##############################################################################
#BIAGRAMS
library(quanteda)
library(igraph)
library(ggraph)
library(tidyr)
#Covert each paper to a line
t_corpus <- text_bigram %>% tidy()
#t_corpus
#create dataframe
df_corpus <- data.frame(t_corpus)
#Create biagrams by separating words in sequences of 2.
bigrams_df <- df_corpus %>%
unnest_tokens(output = bigram,
input = x,
token = "ngrams",
n = 2)
#Count bigrams
bigrams_df %>%
count(bigram, sort = TRUE)
#Remove stopwords in case it wasn't in the beginning.
data("stop_words")
#Separate words into two columns
bigrams_separated <- bigrams_df %>%
separate(bigram, c("word1", "word2"), sep = " ")
#Remove stopwords
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
#Bigram counts, counts the number of times to words are always together
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
#Create network of bigrams
#filter for common combinations of biwords that appear at least 15 times.
bigram_network <- bigram_counts %>%
filter(n > 15) %>%
graph_from_data_frame()
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_network, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 4) +
geom_node_text(aes(label = name), vjust = .7, hjust = 0.1) +
theme_void()
